<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Some advices for bodybuilding rookies]]></title>
      <url>http://chrisp7.github.io/2017/02/28/Some-advices-for-bodybuilding-rookies/</url>
      <content type="html"><![CDATA[<blockquote>
<p>申明：这些东西是我健身以来从网上、私教、朋友、自我践行总结得到的一些成果。不保证一定对，放在这里仅作交流和讨论所用，也算是给健身新手的一些非常基础性的建议。欢迎指正。<br>本想好好分分类，后来想想，谁叫我懒呢~ 就当作一篇漫谈来写吧。排序不分先后，只是想到什么写什么。</p>
</blockquote>
<ol>
<li>三分练，七分吃。吃永远比你想象的要重要。无论是对于希望减脂的人群还是希望增肌的小伙伴。你需要对你自己一天的基础代谢有一个大致的认识。</li>
<li>正常的代谢有一个计算公式<br>对男生来说 BMR=10*你的体重+6.25*你的身高-5*你的年龄+5<br>对女生来说 BMR=10*你的体重+6.25*你的身高-5*你的年龄-161</li>
<li>减脂实际上就是利用热量差达到的效果。你一天摄入的卡路里少于上一个公式计算出的结果时，就会消耗你的脂肪，多于这个结果时就会造成脂肪堆积。就是这么简单。</li>
<li>关于请私教。如果你是要减脂，不推荐。如果你是要增肌，那么在有这个经济条件的情况下还是请私教为好。因为减脂是个体力活，而增肌是个技术活。</li>
<li>减脂不推荐在跑步机上做匀速跑，然后跑个很长时间。一来这样很无聊，很快就会厌倦。二来也许刚开始时这样的消耗会成效颇高，但是时间久了以后人类的牛逼之处就体现出来了。人的身体会逐渐适应这样的强度，然后久而久之消耗会降低。</li>
<li>减脂推荐做HIIT（高强度间歇性训练），具体内容请自行google一下。</li>
<li>肌肉的生长是很慢的，所以到平台期的小伙伴不要因为成效不够明显就不坚持了。</li>
<li>肌肉的生长除了需要蛋白质，还需要热量，维生素等等。所以你不要看到别人在晒健身餐的时候只看到大量的蛋白质，他们一定是配有碳水的，这提供了必要的热量。</li>
<li>减肥实际上是件比较简单的事，增肌是件比较难的事，最难的是希望在减脂的同时达到增肌的效果。因为增肌是需要热量的，而减脂又需要你控制热量。所以这其中的平衡点是很难把握的。</li>
<li><em><strong>增肌最最最重要的一点在于肌肉感受度。</strong></em>所谓肌肉感受度就是比如你在卧推的时候，你能明显的感受到大部分杠铃的重量是被胸吃到的，虽然可能重量太大会有很多动作变形或借力，但是你一定要保证大部分的力量是胸大肌所给予的。</li>
<li>我经常看到很多大爷大妈在跑步机上一走就是一个多小时，如果你也是大爷大妈的话，也可以这么干。多出的项目无非就是最后结束打开snow,美拍,b612，发个朋友圈，来段心灵鸡汤。恭喜你，又感动了自己。</li>
<li>每次去健身房，别太贪心，指望所有的部位都练到。一般情况下我们一个部位就需要五十分钟到一个小时。并且一个部位需要5~6个动作的刺激。</li>
<li>我的安排是一天两个部位，分别一个小时，然后半小时的腹部训练，二十分钟的有氧。一刻钟的洗澡。所以我妈永远不明白为啥我能在健身房呆三个多小时。</li>
<li>如果希望减脂又增肌，步骤应该是如我上面所说。先热身五分钟，然后做力量性训练，最后做有氧。而不是一上来就在跑步机上走那么久。再去做力量性训练。</li>
<li>因为人体消耗的步骤是，先消耗体内的糖，然后再是你的脂肪。体内糖的来源就是你上一顿吃的碳水，很显然你应该把你的糖用来增肌，等你的力量性训练完了再去做有氧就是消耗你的脂肪了。</li>
<li>一周最起码有3~4次的锻炼。</li>
<li>刚开始锻炼的时候可以一天隔一天的锻炼，到一定程度以后根据自己的状态调整训练计划，可以一个循环休息一次。后面需要突破再改计划。</li>
<li>一个循环指的是所有部位都训练到。所有部位包括大肌群：胸、背、腿 小肌群：肩、二三头</li>
<li>一般来说，如果每次训练是两个部位，那么会选择一个大肌群配一个小肌群。我的安排是：胸与二头，背配三头，肩配腿</li>
<li>很多人不愿意蹲腿，实际上这是一个非常好的刺激雄性激素分泌的动作。有句话怎么说来着？健身不练腿，等于没健身。</li>
<li>很多女孩子一来健身房似乎就只认识跑步机和椭圆机。她们抗拒做力量性训练，担心练出肌肉，练成金刚芭比，这种感觉就好像我不愿意踢球，因为我怕练成梅西一般。（笔芯）</li>
<li>原因是本身女性长肌肉就是非常慢的，要出形状更是要付出高代价。因为她们体内雄性激素分泌不像男性那样多。你可以想像一个男性想练出漂亮的肌肉都那么困难，更别说你的蜜汁担忧，害怕成为下一个金刚芭比了。</li>
<li>事实上我也见过可以蹲120公斤的女孩，看上去比那些整天踩椭圆机的女孩要有气质的多。</li>
<li>为什么很多健身餐都有西兰花？因为方便啊~一烫就能吃了</li>
<li>鸡胸肉、鱼肉、虾这些都是都属于白肉，脂肪含量都不高，适合减脂人群。牛肉，羊肉属于红肉，脂肪含量比较高，适合增肌。</li>
<li>放弃猪肉吧</li>
<li>刚开始不必过分追求饮食上的严格控制，可以稍微注意些，不要吃太油即可。后面慢慢加蛋白质的摄入量，蛋白质的摄入量一定是和你的训练量成正比的。你不锻炼吃那么多蛋白质，肾不出问题才怪。</li>
<li>刚开始健身的效果可能会很明显，所以随便吃吃肌肉就能长大。但是过不久就会来到平台期，此时是你最该坚持的时候。可以利用调整姿势，增加组数，穿插不同动作等来应对平台期的训练。</li>
<li>同样也可以通过调整饮食，比如：严格脱油，来达到摆脱平台期的效果。当然这要到非常专业的地步。建议请教私教。一般人谁能受得了所有东西都水煮？</li>
<li>请私教找什么样的？找这个健身房最壮的，扯嘴皮子的直接pass</li>
<li>你们最看重的腹肌实际上在健身老鸟眼中是最不需要花时间的，因为他是一个辅助肌群，很多使用到核心的动作都锻炼到了它，所以很多人甚至没怎么练腹肌就出来了。这要归结于他锻炼时核心发力到位，当然还有最重要的一点：饮食控制。</li>
<li>鸡胸肉太柴，建议腌制一段时间后在水煮会好一些。而且一次买一块鸡胸肉就好，因为一块鸡胸肉可以切四片，分两次吃就行。</li>
<li>牛肉实在是长力量时最好的肉类。而且非常好吃啊~</li>
<li>有氧训练做多了是会掉肌肉的，所以希望增肌的朋友不建议做四十分钟以上的有氧运动。像我这样作死经常打球一打就是两三个小时人，经常第二天健身被教练骂的痛你们不会理解。所以如果要打球，建议在打球前补充足够的热量，比如：吃顿肯德基哈哈哈~</li>
<li>很多人说蛋白粉不要吃。对于这个问题，众说纷纭，反正我是吃的。因为方便啊，吃一勺蛋白粉的效果和买几块牛排回来，腌制，水煮，最后还要洗盘子比起来，你觉得谁方便？但是还是那句话你的训练量要跟上。</li>
<li>不建议一上来就买一大堆的健身补剂来吃，循序渐进。补剂永远只是锦上添花的作用，永远不可能替代主食。也可以将补剂当做突破期的良方。总之，你的努力程度决定了你的补剂效果。</li>
<li>蛋白粉千万别在淘宝买，因为假啊。更别买什么康比特了。。推荐两个牌子的蛋白粉，欧普特蒙，肌肉科技。用iherb海淘买，具体方法请自行google之。知乎也有详细的教程。</li>
<li>补剂推荐肌酸，BCAA 前者帮助肌肉恢复，后者帮助抑制肌肉分解。</li>
<li>肌酸的服用分为冲击期和缓冲期，冲击期三个月每天锻炼一勺就行，一个月缓冲期不吃。</li>
<li>这两个补剂可以每次锻炼的时候泡着喝。</li>
<li>组间休息建议不要太久，40-50秒差不多了。很多人组间休息就是玩手机，一玩就是几分钟。然后就冷了。然后就呵呵思密达了。</li>
<li>卧推一开始手肘和手腕姿势一定要正确，建议多看看老鸟的卧推，否则后患无穷。</li>
<li>做好心理准备你会要找好几个健身伙伴，因为总有那么几个是要放弃的。</li>
<li>大重量少次数是做肌肥大训练，小重量多次数是做肌耐力训练。建议如果有私教就以冲重量为主，自己练得时候以小重量磨为主。</li>
<li>别整天追求过多的动作，找个app，先练好几个动作，找对发力点和发力的感觉是最重要的。</li>
<li>毕竟，less is more , 朋友。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Bodybuilding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Bodybuilding_advice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Netease Java Curriculum Git&&Database]]></title>
      <url>http://chrisp7.github.io/2017/02/28/Netease-Java-Curriculum-Git-Database/</url>
      <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul>
<li>优点</li>
</ul>
<ul>
<li>相对于svn优势在于他是分布式的，这就意味着你的每一个developer都有一个 完整的历史拷贝在本地仓库。不需要像svn一样担心一旦中央仓库出现问题，就彻底game over。</li>
<li>因为有一个本地仓库，所以在没有联网的情况下也能进行工作。</li>
<li>分支的优势</li>
<li>基于内容寻址的存储系统,<code>记录的是内容，而不是文件</code></li>
<li></li>
</ul>
<ul>
<li>分支模型</li>
</ul>
<ul>
<li>常驻分支</li>
</ul>
<ul>
<li>development-从master创建</li>
<li>poroduction-也就是master,默认分支</li>
</ul>
<ul>
<li>活动分支</li>
</ul>
<ul>
<li>feature 从development分支创建</li>
<li>hotfix 从master创建，用于测试</li>
<li>release 从development分支创建，标识一个产品的正式发布</li>
</ul>
<ul>
<li>git status</li>
</ul>
<ul>
<li>三个区域</li>
</ul>
<ul>
<li>工作目录</li>
<li>暂存区</li>
<li>提交区</li>
</ul>
<ul>
<li>文件状态</li>
</ul>
<ul>
<li>未跟踪</li>
<li>已跟踪</li>
</ul>
<ul>
<li>git status 命令就是用来帮助我们来了解这些区域的状态。并帮助我们了解这些文件的变化。</li>
</ul>
<ul>
<li>git add 就是把指定的文件添加到暂存区，并且该文件从未跟踪变成了已跟踪 （<code>可以通过git add .来添加整个目录的文件</code>）</li>
<li>忽略文件</li>
</ul>
<ul>
<li>在添加时忽略</li>
<li><code>仅仅作用于未追踪的文件！</code>相当于在未跟踪与跟踪之间加了一层过滤。</li>
</ul>
<ul>
<li>git rm</li>
</ul>
<ul>
<li>如果只是想从暂存区删除，使用git rm –cached 即可</li>
<li>如果希望从暂存区和工作目录一起删除 使用git rm就行</li>
<li>希望删除所有被跟踪但是在工作目录被删除的文件,使用 git rm $(git ls-files –delete) <code>其中git ls-files列出了所有在暂存区的文件</code></li>
</ul>
<ul>
<li>git commit </li>
</ul>
<ul>
<li>根据暂存区内容完成一次提交</li>
</ul>
<ul>
<li>git log 查看提交历史，更简单的一种方式是git log –oneline</li>
<li>git config可以用来设置别名：git config alias.shortname <fullcommand></fullcommand></li>
<li>git diff 直接输入的话是显示工作目录与暂存区的差异。如果git diff –cached 则是显示暂存区与某次提交之间的差异，默认为HEAD，HEAD指向当前的提交</li>
<li>git checkout “file” 将文件内容从暂存区复制到工作区。<code>相当于撤销对工作区的修改</code> </li>
</ul>
<ul>
<li><strong>git check 在本质上实际就是用来移动HEAD这个指针，而HEAD是指向当前的提交。所以他同时也会把当前的工作目录和暂存区移到你指定的版本。也就是会把那个版本的内容复制到工作目录和暂存区。</strong></li>
</ul>
<ul>
<li>git reset HEAD “file” 将文件内容从上次提交复制到暂存区。<code>相当于撤销了对暂存区的操作</code></li>
<li>git checkout HEAD “file” 直接将提交区文件复制到工作目录。<code>相当于撤销全部改动</code><img src="/2017/02/28/Netease-Java-Curriculum-Git-Database/git_command_flow.png" alt="git work flow" title="git work flow"></li>
<li>git branch “branchname” 创建一个分支.git branch -d “branchname” 删除一个分支. git branch -v 查看现在所有的分支</li>
<li>git cheackout </li>
</ul>
<ul>
<li>git checkout “branchname” 切换到某个分支</li>
<li>git checkout -b “branchname” 直接创建一个分支，并切换到他</li>
<li>git checkout 《reference》 也可以将他切换到任何的引用对象上</li>
<li>git checkout - 回到上一个分支</li>
</ul>
<ul>
<li>当你不用分指名作为参数而把提交版本号作为参数传入git checkout时，这时称为detached head。此时应尽量避免提交东西。以为没有引用会指向这个提交记录。只有HEAD而已。当你HEAD重新回到master时，你刚刚所做的提交都会被视为没有被引用。最后会被git的垃圾回收机制回收。<code>所以当处于分离操作时一般不要做写操作，而是读取他的内容</code></li>
<li>git reset 将当前分支回退到历史某个版本</li>
</ul>
<ul>
<li>git reset –mixed “commit” （默认）此时他会将当前内容复制到暂存区</li>
<li>git reset –hard “commit” 同时会将内容复制到工作目录 </li>
<li>git reset –soft “commit” 暂存区和工作目录不会有任何变化，此时万一是从最新的提交上转移到别的地方，那么那个最新的提交就会丢失了。并且git log已经找不到了。<strong>此时可以使用git reflog来解决。他排出了你HEAD切换分支的路径，那么你就可以通过版本号再次定位到那个最新的分支</strong></li>
</ul>
<ul>
<li>使用捷径 </li>
</ul>
<ul>
<li>A^表示A上的父提交</li>
<li>A~n 表示A之前的第n次提交</li>
</ul>
<ul>
<li>git stash save “somemessage”这种情况一般发生在如下情景，就是你在一个分支进行着工作，一直使用着工作区，还没有将改变的内容添加进暂存区，此时突然另一个分支有一个紧急任务需要完成，但是你又没法切换过去因为一旦这样工作区就会被污染，这个命令就给了我们解决办法。她保存了目前的工作目录和暂存区的状态，并返回到干净的工作空间。其实除了之前所说的工作区，暂存区，提交区以外，还有一个就是stash区。</li>
</ul>
<ul>
<li>git stash list 查看当前stash里有多少保存的内容</li>
<li>git stash apply stash@{0}可以让保存的内容重新恢复到我们的工作目录</li>
<li>git stash drop stash@{0} 将记录从stash区域删除</li>
<li>stash pop= stash apply+stash drop</li>
</ul>
<ul>
<li>git merge 合并分支 当你在master分支上时直接后面加上你要合并的分支名就好。</li>
</ul>
<ul>
<li>当出现冲突后使用git add，然后git commit一下来完成这次冲突的解决</li>
</ul>
<ul>
<li>当你在某个节点创建了分支，然后master分支一直没有移动，而是一直在next分支进行操作，然后进行merge时则不会出现想象的那种两种分支合并的效果，而是会把master分支直接指向next分支。还有一种情况就是没有出冲突，也会这样。如此之后我们的提交历史就会变得线性。但是这样会使得我们看提交历史变得不清晰，如果希望不要变得线性，可以使用git merge “branchname” –no-ff命令</li>
<li>git tag 为某次提交设置一个不变的别名，如某次发布后版本为v0.3那么可以设置这次提交为git tag v0.3 e39d0b2 很显然，第二个参数就是某次提交的哈希。以后直接使用这个标签名就能访问那个版本。</li>
<li><strong>git是支持本地协议的，所以我们是可以初始化一个本地的远程服务器的</strong>使用git init ~/git-server –bare</li>
<li>git push 用于提交到中央仓库，他实际上做的是一个复制的操作，他会把本地的提交历史完整的拷贝一份到远程仓库。</li>
<li>git remote 对远程仓库进行操作。</li>
</ul>
<ul>
<li>git remote add origin ~/git-server 添加一个别名。 一般会把远程的分支别名取名为origin。而且本地是会和远程仓库一样会有一个origin分支的。</li>
</ul>
<ul>
<li>使用git fetch来获取远程仓库的提交历史。一般出现在当你要同步到远程仓库的时，远程仓库在相同的父节点下已经有一个提交，此时会要你先同步远程代码到本地。
一旦同步，你本地的origin分支就会变化，此时你在git merge origin 一下，然后提交。</li>
<li>git pull= git fetch + git merge</li>
<li>git clone 克隆一个远程仓库作为本地仓库 <strong>他就等于git init+git remote+git pull</strong></li>
</ul>
<h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><ul>
<li>我们在使用数据库连接的时候就一行代码conn= DriverManager.getConnection()然而他的背后是非常复杂的
因此建立连接的开销很大</li>
<li>连接池的优势在于使原来创建连接变成了租借连接，并且数据库每次建立一个连接就会创建一个线程，每创建一个线程就会在内存占用一些空间，所以服务器端是要限制最大连接数的，一旦超过了这个连接数就会报异常，重则宕机。这样的反馈方式实在不够友好，我们应该在建立连接的地方就做好限流，起到对后端数据库保护的作用。</li>
<li>后端数据库连接过多时就会存在更多锁的冲突与检测，加大服务器资源的资源消耗。</li>
<li>连接池就是一组jar包。目前使用最广泛的是dbcp，他包括三个jar包，分别是commons-dbcp,commons-pool,commons-logging。可以使用maven进行管理。具体怎么写依赖参考 [Maven Repository]{<a href="https://mvnrepository.com/}" target="_blank" rel="external">https://mvnrepository.com/}</a></li>
<li>数据库连接池的底层还是使用jdbc</li>
<li><p>使用dbcp最重要的是BasicDataSource这个对象。获取到这个对象后需要对他设置url,username,password,drivername用于访问数据库。然后访问步骤就和使用jdbc差不多了。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> BasicDataSource ds=<span class="keyword">null</span>;</div><div class="line"><span class="comment">//连接池初始化</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitDBPool</span><span class="params">()</span></span>&#123;</div><div class="line">    ds=<span class="keyword">new</span> BasicDataSource();</div><div class="line">    ds.setUrl(DB_URL);</div><div class="line">    ds.setDriverClassName(DRIVER_NAME);</div><div class="line">    ds.setUsername(USER_NAME);</div><div class="line">    ds.setPassword(PASSWORD);</div><div class="line">&#125;</div><div class="line"><span class="comment">//连接并查询</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DBPoolTest</span><span class="params">()</span></span>&#123;</div><div class="line">    Connection conn=NULL;</div><div class="line">    Statement stmt=NULL;</div><div class="line">    ResultSet rs=NULL;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        conn=<span class="keyword">new</span> Connection();</div><div class="line">        stmt=conn.createStatement();</div><div class="line">        rs=stmt.executeQuery(<span class="string">"select * from users"</span>);</div><div class="line">        <span class="keyword">if</span>(rs.next)&#123;</div><div class="line">            System.out.println(rs.getString(<span class="string">"username"</span>)) ;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span>(SQLException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>) conn.close();</div><div class="line">            <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) stmt.close();</div><div class="line">            <span class="keyword">if</span>(rs!=<span class="keyword">null</span>) rs.close();</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e2)&#123;</div><div class="line">            e2.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    InitDBPool();</div><div class="line">    DBPoolTest();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>前面说过我们是可以设置连接池的一些属性的。这里有几个重要的参数</p>
<ul>
<li>.setInitialSize() 这个表示一开始启动连接池时就要有多少连接数</li>
<li>.setMaxTotal() 最多能有多少连接数</li>
<li>.setMaxWaitMills() 一旦连接满载，等待队列的最大等待时间</li>
<li>.setMaxldle()  连接池能有的最大空闲连接数</li>
<li>.setTestWhileldle(True) 数据库的物理连接一般8小时后自动关闭，如果超过这个时间一些在连接池的连接没有被销毁，那么这就是一个失效的连接，无法使用。为了保证我们所有的连接都是可以用的，我们需要对<strong>每个连接的连接空闲时间</strong>进行检查，这就是打开这个动作的开关。</li>
<li>.setMinEvictableldle() 设置连接空闲时间的最小值，一旦某个连接的空闲时间大于这个值，则销毁他。一般都是要小于数据库连接的自动销毁时间，也就是8小时。</li>
<li>.setTimeBetweenEvitionRunsMills() 检查连接空闲时间的间隔。</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work_orientated </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NetEase Java Curriculum -- Tomcat&&Maven]]></title>
      <url>http://chrisp7.github.io/2017/02/22/netease-java-curriculum/</url>
      <content type="html"><![CDATA[<h1 id="Java-web"><a href="#Java-web" class="headerlink" title="Java web"></a>Java web</h1><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ul>
<li>本身tomcat也是java写的，需要java虚拟机，所以tomcat在启动时可以加一些java的参数</li>
<li>通过环境变量JAVA_OPTS可以给加一些启动参数</li>
</ul>
<h3 id="Tomcat组成与架构"><a href="#Tomcat组成与架构" class="headerlink" title="Tomcat组成与架构"></a>Tomcat组成与架构</h3><ul>
<li>最重要的就是conf下的server.xml文件<ul>
<li>server 根节点<ul>
<li>service 可以有多个service<ul>
<li>connector 用来接受用户请求的，看过就知道他配置了哪个端口处理哪个协议</li>
<li>engine 对于一个service只能有一个，他用来处理connector接收到的一些请求的，包括我们平时写的一些代码都是由engine来执行<ul>
<li>host 在engine里可以有多个host，表示虚拟主机，一般一个ip加一个端口组成一个对。然后我们在请求里加上不同的host头来决定具体路由到哪个host来处理。<ul>
<li>context 一个context就是一个web应用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>一个service就是一个容器（container）</li>
<li>tomcat中实现容器（container）的组件是catalina，最终我们的代码都是由catalina里面的代码来执行的</li>
<li>具体到每个参数<ul>
<li>connector <ul>
<li>有个address参数，他指明了这个容器将要监听到IP地址。因为一个服务器将会有多个IP地址，如果不进行配置，他默认将对所有的IP地址进行监听，而这处于安全方面的考量是不被允许的</li>
<li>protocol 指名用什么协议，一般开发不会更改，到后面性能调优的时候会有涉及</li>
<li>acceptCount 这个参数是用来指明当所有线程都用来处理请求，你的等待队列的长度。有点像理发师那个程序里buffer的长度。</li>
<li>maxConnections 最大连接数。需要注意的是他是和你能生成的最大线程数相关的。当你把他的值设为-1的时候表示不限制最大连接数。当然，你虽然设置了-1，但是最大连接数还是要受其他资源的限制。也就是说还是会有最大连接数的</li>
</ul>
</li>
</ul>
</li>
<li>线程池 传统的请求响应方式是你来一个请求，我创建一个线程，建立一个连接，处理这个请求。等请求结束就回收这次的资源。但是这将遇到一个问题就是非常地耗时，因为每次都建立和销毁都是要时间的。所以机智的人类想出来一个方法就是我先提前创建一些线程放在线程池，然后有请求来就响应，响应结束后并不销毁。这就好像医院里面的挂号服务，不管你有没有病人来，挂号窗口都是有服务人员的。<ul>
<li>他的配置项是<executor></executor></li>
<li>最小空闲线程数（minSpareThreads） 用来设置线程池最小的线程数。这就好比医院要求的挂号服务在一般情况下最少要有多少个窗口有人值班。</li>
<li>最大线程数 （maxThreads） 用来表示这个线程池能接受的最大线程数。同样类比到挂号服务，就是最多能有多少窗口同时开启工作。之后来的人就得等待。</li>
<li>这两个参数可以直接配置在connector里面，也可以单独的配在Executor里面，然后在connector里面指定依赖关系。</li>
<li>这两个参数构成了另一个概念，弹性线程池。当多于minSpareThreads规定的请求数的时候就会创建其他线程到线程池处理请求，直到创建到最大值。当只有少数请求时，就只开minSpareThreads规定的线程数在线程池。</li>
</ul>
</li>
<li>日志<ul>
<li>日志分类<ul>
<li>系统运行日志 记录tomcat运行状态，结果等。会捕获一些异常</li>
<li>访问日志 记录所有的请求</li>
<li>应用日志 用户自己写的</li>
</ul>
</li>
<li>配置访问日志 也是在server.xml里面配置<ul>
<li>在标签Valve里面配置</li>
<li>prefix 指定了你日志命名的开头</li>
<li>suffix 指定日志命名的结尾</li>
<li>pattern 指名日志里面每一条记录所记录的东西<ul>
<li>请求方法是%m ，客户端IP是 %a ，请求时间是 %t ，请求方法是%r ，状态码是%s ，客户端代理是%{User-agent}i<br>*fileDateFormat 他常常搭配另一个参数rotatable，当rotatable为true时，fileDateFormat指定了日志以怎样的格式切割。（日志文件切割的意义在于使日志文件不至于过大，这样不至于你检索和查看都会很慢。）如：fileDateFormat: yyyy-MM-dd.时，日志就会每天滚动一次，如果设置成yyyy-MM-dd.HH.那么他每小时就会滚动一次。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><ul>
<li>groupId 组织名 一般就是用你项目包的前缀命名，如：com.chrisp7</li>
<li>artifactId 项目标识符，一般就是写项目名字。不要加点。</li>
<li>version 版本 一般都是x.y.z这样的格式。如果你是在开发过程中，那么可以在后面加上一个SNAPSHOT，这样maven会根据这个判断出他是一个在开发的版本。这样maven在你不改版本号的情况下也能判断出哪个新哪个旧。因为她会根据SNAPSHOT自动的打上时间戳。<blockquote>
<p>groupId artifactId version 是maven中一个项目的坐标，通过这个三个值可以唯一的定位一个项目。这三个的值不能重复。</p>
</blockquote>
</li>
<li>package 类型，如：war<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3></li>
<li>mvn archetype:generate 根据模板生成项目</li>
<li>mvn compile 编译源代码</li>
<li>mvn test 跑测试</li>
<li>mvn package 打包</li>
<li>mvn 生成项目相关的站点，在线文档</li>
<li>mvn install 将包安装到本地仓库，让其他项目进行依赖<h3 id="使用maven"><a href="#使用maven" class="headerlink" title="使用maven"></a>使用maven</h3></li>
<li>使用maven:generate后maven会自动为你生成一些目录，而你的Java文件必须写在src下的java文件中，就像这样<img src="/2017/02/22/netease-java-curriculum/maven_directory.png" alt="This is maven directory" title="This is maven directory"></li>
<li>mvn archetype:generate 后面要跟很多参数，这些指定了你pom.xml里面的一些东西。其中需要注意的一个参数是DarchetypeArtifactId，如果是webapp，那么这里得是maven-archetype-webapp。如果是一个普通的Java项目，那么就得写成maven-archetype-quickstart</li>
<li>在maven中可以添加一个插件tomcat7，他是集成在maven里面的tomcat。如果你还没用IDE那么这将极大的简化项目的部署。只需要一个指令mvn tomcat7:run即可完成所有。当然，如果你使用IDE这些都可以忽略。</li>
<li>普通的Java项目得有一个resources文件夹在main文件夹下</li>
<li>当用pom来管理多个项目使其形成依赖时，需要在子项目中的pom中指定依赖关系，需要指明groupId,artifactId,version,relativePath.四个标签。同时也需要在最顶层的pom文件中指定有哪些子项目。也就是modules标签。</li>
<li>在pom.xml中，不严肃的说，一个构建就可以等价为一个项目,即project=artifact.</li>
<li>在pom中可以得到这些信息<ul>
<li>项目类型（package指定）</li>
<li>坐标</li>
<li>属性（￥{property}）</li>
<li>依赖</li>
<li>构建配置（configuration）</li>
<li>多项目，继承</li>
<li>项目总体信息</li>
</ul>
</li>
<li><p>pom继承</p>
<ul>
<li>可继承项<ul>
<li>坐标属性，如groupId.</li>
<li>依赖配置（比如有些子项目都依赖某个配置，就可以把它放到父pom中）</li>
<li>插件配置（公共插件配置）</li>
<li>一般性信息，如开发者信息</li>
</ul>
</li>
<li>java中我们都知道所有的类有一个根，就是Object类，那么在pom中是否也有呢？答案是肯定的。就是Super Pom</li>
<li><p>如果你编辑了pom文件没有显示的定义从哪里继承，那么它就是从super pom继承。可以使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn <span class="built_in">help</span>:effective-pom</div></pre></td></tr></table></figure>
<p>查看super pom默认的配置，<code>但是需要注意的的是在这之前你必须保证在同级目录下先创建一个pom文件</code></p>
</li>
<li>超级Pom定义了一组被所有项目能共享的默认设置<ul>
<li>默认的文件位置</li>
<li>统一的插件配置</li>
<li>默认的中央仓库的位置</li>
</ul>
</li>
<li>显示的配置<ul>
<li>使用parent元素进行配置</li>
</ul>
</li>
</ul>
</li>
<li>依赖配置<ul>
<li>scope</li>
<li>用于继承的pom配置 dependencyManagement</li>
<li>依赖哪里寻找？仓库 默认仓库目录在~/.m2/repository</li>
<li>远程仓库分类 <ul>
<li>中央仓库</li>
<li>其他公共仓库（国内使用比较多的开源中国）</li>
<li>私服</li>
</ul>
</li>
<li>配置setting.xml<br><code>实践中遇到一个问题就是当我将所有的pom删掉，重新写一遍依赖关系以后。在本身pom文件没有问题的情况下，他报了个错误</code><img src="/2017/02/22/netease-java-curriculum/could_not_find_artifact.png" alt="could_not_find_artifact.png" title="">
<code>我前面由于一知半解，并不知道maven的工作流程。所以一直在想怎么才能把这个Kitchen.jar生成出来。但是之前的做法似乎没有单独生成jar包的说法，毕竟所有的步骤都是maven自动完成的，后来经过网上的查阅，才明白maven的执行是要依赖于库的，有些包可以从网上下载，但是我们自己写的包是需要自己放入本地库的，所以也许之前的某个操作使得我把本地库中的Kitchen.jar删除了，现在必须要把他重新放进本地库。要实现这个操作就要在最顶层的pom文件夹执行mvn install命令。</code></li>
</ul>
</li>
<li>构建声明周期<ul>
<li>每个阶段执行预先定义的动作</li>
<li>maven有三个独立的生命周期<ul>
<li>clean pre-clean post-clean</li>
<li>default </li>
<li>site 生成一些文档</li>
</ul>
</li>
<li>默认生命周期<ul>
<li>validate 检查项目的正确性，验证一些必要信息</li>
<li>process-resources 将资源文件复制项目中</li>
<li>compile</li>
<li>test </li>
<li>package 编译好的文件打包</li>
<li>install 将包安装到本地仓库</li>
<li>deploy 将打包好的文件上传远程仓库，这样其他人也可以用</li>
</ul>
</li>
<li>每个阶段怎么做的？<ul>
<li>插件式架构</li>
<li>插件本身也是maven中的构建，由maven仓库管理</li>
<li>所有功能由插件提供</li>
<li>插件中有多个目标，每个目标就是一个构建逻辑，你也可以直接指定调用哪个插件的哪个目标来执行。命令：mvn plugin:目标<ul>
<li>生命周期与目标绑定 </li>
<li>当你在命令行执行某个命令，也就是某个生命阶段的时候实际上就是调用了某个插件目标。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>插件<ul>
<li>mvn内建插件</li>
<li>help插件 mvn help:help -Ddetail=true 这个命令告诉你help插件本身的帮助文档、</li>
<li>tomcat7 可以把tomcat嵌在maven项目中。不需要另外配置了</li>
<li>exec 简单的将jar包跑起来。<br>…</li>
</ul>
</li>
<li><p>插件配置</p>
<ul>
<li><p>configuration配置 通过命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn <span class="built_in">help</span>:describe0 -Dplugin=&lt;plugin_name&gt; -Dgoal=&lt;goal&gt; -Ddetail=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>可以查看某个插件的某个目标能指定哪些配置项</p>
</li>
<li>插件也可以继承，把要公用，也就是继承的插件放到pluginManagement标签就行。</li>
</ul>
</li>
</ul>
<h2 id="实践中的一些心得"><a href="#实践中的一些心得" class="headerlink" title="实践中的一些心得"></a>实践中的一些心得</h2><ol>
<li>当你在做服务端开发，需要修改一些配置文件的时候一定要记得备份。可以直接使用如：cp server.xml server.xml.bak命令</li>
<li>访问网址不一定要用chrome，在终端就可以用curl命令。如：curl <a href="http://baidu.com" target="_blank" rel="external">http://baidu.com</a></li>
<li>telnet可以实现发请求发一半，实现占着一个线程的效果</li>
<li>在linux系统中终端里想看文本内容，可以用cat命令</li>
<li>解压tar.gz文件使用命令 tar xvzf xxx.tar.gz</li>
<li>希望在终端打包成一个war包。可以使用命令：jar cvf xxx.war . （别忘了后面有个点，代表当前路径）</li>
<li>如果希望使用剪切的效果。那就使用mv命令啊，别用cp命令</li>
<li>可以使用javac -cp apache-tomcat/lib/servlet-api.jar WEB-INF/xxx.java 的方式指定用某个api编译某个Java文件，将其编译为class文件</li>
<li>add external jar jar包没有拷贝进项目 add jar jar包拷贝进了项目</li>
<li></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work_orientated </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人markdown常用语法]]></title>
      <url>http://chrisp7.github.io/2017/02/16/%E4%B8%AA%E4%BA%BAmarkdwon%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><h2 id="1、-用-区分标题级别"><a href="#1、-用-区分标题级别" class="headerlink" title="1、 用#区分标题级别"></a>1、 用<code>#</code>区分标题级别</h2><p>markdown支持6级标题，一级标题是一个<code>#</code>，以此类推，六级标题就是六个<code>#</code></p>
<h2 id="2、强调"><a href="#2、强调" class="headerlink" title="2、强调"></a>2、强调</h2><p>两个 <code>*</code> 或者 <code>-</code> 代表加粗，一个 <code>*</code> 或 <code>-</code> 表示斜体</p>
<p>效果：<strong>加粗文本</strong>，<em>斜体文本</em></p>
<h2 id="3、无序-amp-有序列表"><a href="#3、无序-amp-有序列表" class="headerlink" title="3、无序&amp;有序列表"></a>3、无序&amp;有序列表</h2><p>无序列表使用-、+、*<br>有序列表使用数字加英文句点 </p>
<p>效果：</p>
<ul>
<li>A</li>
<li>B</li>
<li>C</li>
</ul>
<ol>
<li>A</li>
<li>B</li>
<li>C</li>
</ol>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>使用引用时用 &gt; </p>
<p>效果：</p>
<blockquote>
<p>这是一段引用</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> self_learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[problem using hexo]]></title>
      <url>http://chrisp7.github.io/2017/02/15/problem-using-hexo/</url>
      <content type="html"><![CDATA[<h1 id="安装hexo所遇问题"><a href="#安装hexo所遇问题" class="headerlink" title="安装hexo所遇问题"></a>安装hexo所遇问题</h1><h2 id="使用脚本-amp-amp-修改权限"><a href="#使用脚本-amp-amp-修改权限" class="headerlink" title="使用脚本&amp;&amp;修改权限"></a>使用脚本&amp;&amp;修改权限</h2><p>对于每一次的部署我们知道都是同样的三个命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> clean</div><div class="line"><span class="variable">$hexo</span> generate</div><div class="line"><span class="variable">$hexo</span> deploy</div></pre></td></tr></table></figure></p>
<p>于是可以选择用脚本执行。在我将其写进脚本后发现并不能执行。用l命令查看后只有可读可写权限，光头告诉我要修改权限，让他可执行。很久没用chmod命令，这次光头一提醒发现他的参数确实很容易记，就是(u/g/o)+(r/w/x) 然后跟文件名即可。如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u+x filename</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="command-not-found-hexo"><a href="#command-not-found-hexo" class="headerlink" title="command not found : hexo"></a>command not found : hexo</h2><p>当我第二天准备重新使用前一天写的脚本来自动化的部署一次我的md文件时，却报出来<code>command not found : hexo</code> 我的第一反应是难道昨天用npm装了那么多次的hexo又没了？于是当我尝试用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>他又报错 <code>command not found : npm</code> 此时我已不只是怀疑hexo出了问题。显然npm是和node一起装的，我又用同样的方式检查了一遍node。果然又出现<code>command not found : node</code><br>这才明白是从node这儿出了问题。<br>google之后，发现正常的安装node后他会出现在/usr/local/bin中，然而当我去检查时却发现并没有node。我想起之前是用nvm安装的node，并且之前我有记录hexo的路径，打开hexo所在文件夹果然node就在里面。于是我将node所在目录写进了.bash_profile.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH=$PATH:$HOME/.nvm/versions/node/v6.9.4/bin'</span> &gt;&gt; <span class="variable">$HOME</span>/.bash_profile</div></pre></td></tr></table></figure></p>
<p>生效过后，发现node可以用了。npm 和 hexo 的问题也都解决了。</p>
<p>由此问题以后看到<code>command not found : xxx</code>便可知道一定是你的PATH里没有放你要用的命令的路径，并且这儿命令如果是后来装的，那么他大多会出现在/usr/local/bin下 因为mac下这个目录就是用来保存你后期用brew或者其他方式下载的可执行命令。</p>
<hr>
<h2 id="hexo-目录"><a href="#hexo-目录" class="headerlink" title="hexo 目录"></a>hexo 目录</h2><p><strong>/Users/CP/.nvm/versions/node/v6.9.4/lib/node_modules/hexo-cli/bin/hexo</strong></p>
<hr>
<h2 id="点击顶部菜单栏时显示404"><a href="#点击顶部菜单栏时显示404" class="headerlink" title="点击顶部菜单栏时显示404"></a>点击顶部菜单栏时显示404</h2><p>当我点击除了home以外的菜单栏按钮时，都出现了404 not found 的问题，页面不存在。经过网上查阅资料，发现是没有新建页面。于是我使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page xxx</div></pre></td></tr></table></figure></p>
<p>依次新建了tags、categories页面。这样就可以访问了。</p>
<blockquote>
<p><strong><code>注意</code></strong><br>这里在新建了页面后，hexo会在对应的目录下新建一个index.md的文件，你需要在front-matter里面加上一行type属性，以指名他对应的menu</p>
</blockquote>
<hr>
<h2 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h2><p>对于文章中只有少量图片的情况，只需将图片放在source/images文件夹即可。然后使用 <code>![] (/images/image.jpg)</code> 引用图片即可<br>对于有多张图片的情况，建议集中管理。首先先到_config.yml 设置</p>
<blockquote>
<p>_config.yml<br>post_asset_folder: true</p>
</blockquote>
<p>此时资源文件管理功能打开，以后每次用hexo new [layout] “xxx” 新建文章时，都会在你新建的markdown文件同一个文件夹下新建一个和你命名的markdown文件同名的资源文件夹，然后与这篇文章所有相关的资源文件都可以放在这里，然后用标签插件进行引用。如：</p>
<blockquote>

</blockquote>
<hr>
<h2 id="结束引用"><a href="#结束引用" class="headerlink" title="结束引用"></a>结束引用</h2><p>如果想结束引用，只要连按两下回车就行。</p>
]]></content>
      
        <categories>
            
            <category> Technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> self_learning </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
